import math
class Solution:
    def quadraticRoots(self, a, b, c):
        # code here
        d=(b*b)-(4*a*c)
        d1=math.sqrt(abs(d))
        li=[]
        if d<0:
            li.append(-1)
        elif d==0:
            ans=math.floor(-b/(2*a))
            li.append(ans)
            li.append(ans)
        else:
            ans1=math.floor((-b+(d1))/(2*a))
            ans2=math.floor((-b-(d1))/(2*a))
            li.append(ans1)
            li.append(ans2)
        return sorted(li,reverse=True)
        



#{ 
#  Driver Code Starts
#Initial Template for Python 3

if __name__ == '__main__':
    tc = int(input())
    for _ in range(tc):
        abc=[int(x) for x in input().strip().split()]
        a=abc[0]
        b=abc[1]
        c=abc[2]
        ob = Solution()
        ans = ob.quadraticRoots(a,b,c)
        if len(ans)==1 and ans[0]==-1:
            print("Imaginary")
        else:
            for i in range(len(ans)):
                print(ans[i], end=" ")
            print()

# } Driver Code Ends
